# -*- coding: utf-8 -*-
"""PracticaAprendizajeSupervisado_Regresion_Lineal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eixSpTTndPFpYV8qDZw7uHZI_wUX4PPw
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score

df = pd.read_csv("hf://datasets/VarunKumarGupta2003/Car-Price-Dataset/car_sales_data.csv")

df.info()

df.head(20)

df.isnull().sum()

df.duplicated().sum()

df.columns.duplicated().sum()

for col in df.columns:
  print(f'{col}: {df[col].unique()}')

df['Year'] = pd.to_numeric(df['Year'],errors='coerce')
df['Year'].fillna(0).astype('int64')
median_age = df['Year'][df['Year'] !=0].median()
df['Year'].replace(0,median_age).astype('int64')

df.select_dtypes(include=np.number).columns[:]

df.columns[:]

for col in df.select_dtypes(include=np.number).columns[:]:
  plt.figure()
  sns.histplot(df[col],bins=10)
  plt.title(f'Histograma de {col}')
  plt.show()

for col in df.select_dtypes(include=np.number).columns[:]:
  plt.figure()
  sns.boxplot(y=df[col])
  plt.title(f'BoxPlot de {col}')
  plt.show()

Q1 = df.select_dtypes(include=np.number).quantile(0.25)
Q3 = df.select_dtypes(include=np.number).quantile(0.75)
IQR = Q3 - Q1

lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

lower_bound

for col in df.select_dtypes(include=np.number).columns :
  df[col] = np.where(df[col] < lower_bound[col], lower_bound[col],df[col])
  df[col] = np.where(df[col] > upper_bound[col], upper_bound[col], df[col])

x = df['Mileage']
y = df['Price']

x= x.values.reshape(-1,1)

scaler = MinMaxScaler()
x_scaled = scaler.fit_transform(x)
x_scaled

model = LinearRegression()
x_train, x_test, y_train, y_test = train_test_split(x_scaled,y,train_size=0.8,random_state=42)
model.fit(x_train,y_train)

y_pred = model.predict(x_test)

y_pred

dataframe = pd.DataFrame({'y_pred': y_pred, 'y_test': y_test})
dataframe

plt.scatter(x_test,y_test,color='blue',alpha=0.5,label='Datos reales')
plt.plot(x_test,y_pred,color='red',linewidth=2,label='Modelo de regresion')
plt.xlabel("Mileage: Son las millas")
plt.ylabel("Price de los carros")
plt.legend()
plt.show()

metrica_cuadrada = mean_squared_error(y_test,y_pred)
metrica_abs = mean_absolute_error(y_test,y_pred)
r2 = r2_score(y_test,y_pred)
print('metrica_cuadrada :',metrica_cuadrada)
print('metrica_abs :',metrica_abs)
print('r2 :',r2)

plt.figure()
plt.scatter(y_test,y_pred,alpha=0.5,label='Datos')
plt.plot([min(y_test),max(y_test)],[min(y_test),max(y_test)],color='red',linestyle='-',label='Modelo de regresion')
plt.xlabel('Valores reales(y_test)')
plt.ylabel('Valores predichos(y_pred)')
plt.legend()
plt.show()

"""***Regresion lineal multiple***

# Regresion lineal multiple
"""

x= df.select_dtypes(include=np.number).iloc[:,:-1]
y= df.iloc[:,-1]
x

df.isnull().sum()

df.duplicated().sum()

df.columns.duplicated().sum()

for col in df.select_dtypes(include=np.number).columns[:]:
  plt.figure()
  sns.boxplot(y=df[col])
  plt.title(f'Boxplot de {col}')
  plt.show()

correlacion = df.select_dtypes(include=np.number).corr(method='pearson')
plt.figure()
sns.heatmap(correlacion,annot=True,cmap='coolwarm',fmt=".2f")
plt.title("Matriz de correlacion de pearson")
plt.show()

scaler = MinMaxScaler()
x_scaled = scaler.fit_transform(x)
x_scaled

x_dataframe = pd.DataFrame(x_scaled,columns=['col1','col2','col3'])
x_dataframe

x_train,x_test,y_train,y_test = train_test_split(x,y,train_size=0.8,random_state=50)

scaled = MinMaxScaler()
x_train = scaled.fit_transform(x_train)
x_test = scaled.transform(x_test)
x_train
x_test

model = LinearRegression()
model.fit(x_train,y_train)
y_pred = model.predict(x_test)

df_predicciones = pd.DataFrame({'y_pred':y_pred,'y_test':y_test})
df_predicciones

print('mse: ',mean_squared_error(y_test,y_pred))
print('mae: ',mean_absolute_error(y_test,y_pred))
print('r2: ',r2_score(y_test,y_pred))

plt.scatter(y_test,y_pred,color='blue',alpha=0.5,label='Datos reales')
plt.plot([min(y_test),max(y_test)],[min(y_test),max(y_test)],color='red',linewidth=2,label='Mode regresion multiple')
plt.xlabel('y_test')
plt.ylabel('y_pred')
plt.legend()
plt.show()